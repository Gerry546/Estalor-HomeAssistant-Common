weather_waqi:
  state_display: |
    [[[ return Math.round(entity.state) ]]]
  name: AQI
  icon: mdi:molecule
  label: '[[[ return variables.level ]]]'
  show_units: false
  styles:
    card:
      - background: |
          [[[
            if (entity.state > 300) {
              return "rgba(var(--rgb-accent-color),1)"
            } else if (entity.state > 200) {
              return "rgba(var(--rgb-accent-color),1)"
            } else if (entity.state > 150) {
              return "rgba(var(--rgb-primary-color),1)"
            } else if (entity.state > 100) {
              return "rgba(var(--rgb-primary-color),.66)"
            } else if (entity.state > 50) {
              return "rgba(var(--rgb-primary-color),.33)"
            } else {
              return "var(--ha-card-background)"
            }
          ]]]

weather_current_temperature:
  name: '[[[ return entity.state ]]]'
  # TODO: label: '[[[ return variables.weather_trend ]]]'
  state_display: >-
    [[[ return Math.round(entity.attributes.temperature) + "°"
    ]]]
  styles:
    name:
      - width: 50%
    grid:
      - background: var(--ha-card-background)
    card:
      - background: |
          [[[
            var temp = parseFloat(entity.attributes.temperature)
            if (temp >= 25) {
              return "rgba(var(--rgb-primary-color)," + ((temp - 25) / 7) + ")"
            }
            if (temp <= 20) {
              return "rgba(var(--rgb-primary-color)," + ((20 - temp) / 14) + ")"
            }
            return "transparent"
          ]]]

# weather_variables:
#   triggers_update:
#     - sensor.valhalla_hourly_forecast_temperature_rising

#   variables:
#     weather_trend: |
#       [[[
#         var tempForecast = entity.attributes.forecast.map((item) => { return item.temperature }).slice(0, 4)
#         if (states['sensor.valhalla_hourly_forecast_temperature_rising'].state == 'Rising') {
#           return '↗ ' + Math.max(...tempForecast) + '°'                      
#         } else {
#           return '↘ ' + Math.min(...tempForecast) + '°'
#         }
#       ]]]

weather_precipitation:
  variables:
    day: |
      [[[
        var hour = new Date
        hour = parseInt( hour.getHours() )
        if (hour < 4) { return 1 }
        if (hour < 21) { return 0 } else { return 1 }
      ]]]
  name: Precipitation
  state_display: '[[[ return entity.attributes.forecast[variables.day].precipitation_probability + "%" ]]]'
  icon: '[[[ return (entity.attributes.forecast[variables.day].precipitation_probability >= 33) ? "mdi:water" : "mdi:water-outline" ]]]'
  label: '[[[ return entity.attributes.forecast[variables.day].precipitation ]]]'
  show_units: false
  styles:
    grid:
      - background: '[[[ return "rgba(var(--rgb-primary-color)," + (parseInt(entity.attributes.forecast[variables.day].precipitation_probability)/100) + ")" ]]]'
    card:
      - background: var(--ha-card-background)
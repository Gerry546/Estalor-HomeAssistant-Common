# LIVE TILES

# Live Tile Card
# This is the base of various tiles.

live_tile_card:
  variables:
    aspect_ratio: 1/1
  color_type: card
  size: 20px
  show_state: true
  show_label: true
  state:
    - value: 'off'
      styles:
        card:
          - background-color: var(--ha-card-background)
        state:
          - color: var(--primary-text-color)
        name:
          - color: var(--primary-text-color)
        label:
          - color: var(--primary-text-color)
          - opacity: 0.67
    - value: unavailable
      styles:
        card:
          - background-color: var(--ha-card-background)
        state:
          - color: var(--disabled-text-color)
        name:
          - color: var(--disabled-text-color)
        label:
          - color: var(--disabled-text-color)
          - opacity: 0.67
    - operator: default
      styles:
        card:
          - background-color: var(--ha-card-background)
        state:
          - color: var(--primary-text-color)
        name:
          - color: var(--primary-text-color)
        label:
          - color: var(--primary-text-color)
          - opacity: 0.67
  state_display: '[[[ if (entity != undefined) { return entity.state.replace("_", " ") } ]]]'
  hold_action:
    action: more-info
  styles:
    grid:
      - grid-template-areas: |
          "s s"
          "l l"
          "n i"
      - grid-template-columns: 1fr min-content
      - grid-template-rows: min-content auto min-content
    card:
      - aspect-ratio: '[[[ return variables.aspect_ratio ]]]'
      - padding: 0
    name:
      - font-size: var(--body-font-size)
      - padding: 4px 4px 10px 12px
      - white-space: normal
      - text-align: left
      - justify-self: start
      - align-self: end
    state:
      - font-size: var(--h3-font-size)
      - justify-self: start
      - padding: 4px 12px 0px 12px
      - font-weight: var(--h3-font-weight)
      - align-self: start
      - text-overflow: clip
      - display: -webkit-box
      - -webkit-line-clamp: 2
      - -webkit-box-orient: vertical
      - text-transform: capitalize
    img_cell:
      - align-self: end
      - text-align: right
      - padding: 4px 8px 4px 4px
      - height: 28px
    label:
      - font-size: var(--body-font-size)
      - justify-self: start
      - padding: 0px 12px
      - align-self: start
      - opacity: 0.67
      - white-space: normal
      - text-align: left
      - height: 100%

# Live Tile (with Graph)

live_tile_with_graph:
  variables:
    picture: '[[[ return entity.attributes.entity_picture ]]]'
    hours_to_show: 12
    group_by: interval
    points_per_hour: 4
    graph_height: 144
    line_width: 4
    line_color: var(--rgb-accent-color)
    graph: line
    lower_bound: ~10000
    upper_bound: ~0
    bar_spacing: 50
    aggregate_func: avg
  template: live_tile_card
  custom_fields:
    graph:
      card:
        type: custom:mini-graph-card
        entities:
          - entity: '[[[ return entity.entity_id ]]]'
            aggregate_func: '[[[ return variables.aggregate_func ]]]'
        show:
          graph: '[[[ return variables.graph ]]]'
          name: false
          icon: false
          state: false
          labels: false
          points: false
        line_width: '[[[ return variables.line_width ]]]'
        line_color: '[[[ return `rgb(${variables.line_color}` ]]]'
        hours_to_show: '[[[ return variables.hours_to_show ]]]'
        group_by: '[[[ return variables.group_by ]]]'
        points_per_hour: '[[[ return variables.points_per_hour ]]]'
        animate: true
        upper_bound: '[[[ return variables.upper_bound ]]]'
        lower_bound: '[[[ return variables.lower_bound ]]]'
        height: '[[[ return variables.graph_height ]]]'
        bar_spacing: '[[[ return variables.bar_spacing ]]]'
        card_mod:
          style: |
            ha-card { background: none; border-radius: 0; }
  styles:
    grid:
      - grid-template-areas: |
          "s s" 
          "l l" 
          "graph graph" 
          "n i"
      - grid-template-columns: 1fr min-content
      - grid-template-rows: min-content auto 0 min-content
    card:
      - color: var(--primary-text-color)
      - background: var(--ha-card-background)
    custom_fields:
      graph:
        - position: absolute
        - bottom: 0
        - width: 100%
        - border-bottom: |
            [[[
              if (variables.graph == "line") { return `3.25rem solid rgba(${variables.line_color}, .15)` } 
              else { return "3.25rem solid transparent" }
            ]]]
        - border-radius: 0
        #   # rgba(var(--rgb-accent-color),.15)
    name:
      - z-index: 2
    icon:
      - z-index: 2

# Live Tile (with State Unit)

live_tile_with_state_unit:
  variables:
    unit: '[[[ return entity.attributes.unit_of_measurement ]]]'
    state_display: '[[[ return Math.round(entity.state) ]]]'
  state_display: |
    [[[
      return variables.state_display + "<span style='font-size: var(--h6-font-size); font-weight: var(--h6-font-weight); text-transform: uppercase; opacity: .6;'> " + variables.unit + "</span>"
    ]]]
  styles:
    state:
      - text-overflow: inherit

# Live Tile (with Graph Threshold)
# Card becomes increasingly highlighted as entity state reaches the upper or lower bound.

live_tile_with_graph_threshold:
  variables:
    line_color_upper_bound: 75
    line_color_upper_bound_max: 100
    line_color_lower_bound: 25
    line_color_lower_bound_min: 0
  custom_fields:
    graph:
      card:
        line_color: |
          [[[
            if (parseFloat(entity.state) >= variables.line_color_upper_bound_max) { return "var(--primary-text-color)" }
            if (parseFloat(entity.state) <= variables.line_color_lower_bound_min) { return "var(--primary-text-color)" }
            return `rgb(${variables.line_color}`
          ]]]
        # color_thresholds_transition: hard
        color_thresholds: |
          [[[
            var stateValue = parseFloat(entity.state)
            if ((stateValue >= variables.line_color_upper_bound_max) || (stateValue <= variables.line_color_lower_bound_min)) {
              return []
            } else {
              var primaryTextColor = '#' + getComputedStyle(document.body).getPropertyValue('--rgb-primary-text-color').split(',').map(x => parseInt(x).toString(16).padStart(2, '0')).join('')
              var accentColor = getComputedStyle(document.body).getPropertyValue('--accent-color')
            
              return [
                {
                  value: variables.line_color_lower_bound,
                  color: accentColor
                },
                {
                  value: variables.line_color_lower_bound,
                  color: primaryTextColor
                },
                {
                  value: variables.line_color_upper_bound,
                  color: primaryTextColor
                },
                {
                  value: variables.line_color_upper_bound,
                  color: accentColor
                }            
              ]
            }
          ]]]
  styles:
    grid:
      - background: |
          [[[
            var stateValue = parseFloat(entity.state)
            if (stateValue >= variables.line_color_upper_bound_max) { return "var(--accent-color)"}
            if (stateValue <= variables.line_color_lower_bound_min) { return "var(--accent-color)"}
            if (stateValue >= variables.line_color_upper_bound) {
              var percent = (Math.min((stateValue - variables.line_color_upper_bound) / (variables.line_color_upper_bound_max - variables.line_color_upper_bound), 1) * .5)
              return `rgba(var(--rgb-primary-color), ${percent})`
            }
            if (stateValue <= variables.line_color_lower_bound) {
              var percent = (Math.min((variables.line_color_lower_bound - stateValue) / (variables.line_color_lower_bound - variables.line_color_lower_bound_min), 1) * .5)
              return `rgba(var(--rgb-primary-color), ${percent})`
            }
            return "var(--ha-card-background)"
          ]]]
    custom_fields:
      graph:
        - border-bottom: |
            [[[
              var lineColor = "var(--rgb-accent-color)"
              if (parseFloat(entity.state) >= variables.line_color_upper_bound_max) { lineColor = "var(--rgb-primary-text-color)" }
              if (parseFloat(entity.state) <= variables.line_color_lower_bound_min) { lineColor = "var(--rgb-primary-text-color)" }
              if (variables.graph == "line") { return `3.25rem solid rgba(${lineColor}, .15)` } else { return "3.25rem solid transparent" }
            ]]]

# Live Tile (with Long State)

live_tile_with_long_state:
  styles:
    state:
      - font-size: var(--h4-font-size)
      - font-weight: 100
      - padding: 8px 12px 2px 12px
      - white-space: normal
      - text-align: left
      - line-height: 24px

# Live Tile (with State Countdown)

live_tile_with_state_countdown:
  variables:
    duration: 60
  template: live_tile_with_last_changed_label
  state:
    - value: 'off'
      styles:
        card: null
  styles:
    grid:
      - background: |
          [[[
            var diff = (new Date() - new Date(entity.last_changed)) / 1000
            var opacity = 1 - (diff / variables.duration)
            if (diff > variables.duration) { return '' }
            return 'rgba(var(--rgb-primary-color),' + opacity + ')'
          ]]]
      - color: |
          [[[
            var diff = (new Date() - new Date(entity.last_changed)) / 1000
            if (diff > variables.duration / 2) { return 'var(--primary-text-color)' } else { return 'var(--accent-text-color)'}
          ]]]

# Live Tile (with Last Changed Label)

live_tile_with_last_changed_label:
  show_label: true
  triggers_update: all
  label: |
    [[[
      var diff = (new Date() - new Date(entity.last_changed)) / 1000 / 60
      if (isNaN(diff)) { return 'Unknown' }
      if (diff <= 0.05) { return 'Just now' }
      else if (diff <= 1) { return Math.round(diff * 60) + ' seconds ago' }
      else { return moment(entity.last_changed).fromNow() }
    ]]]

live_tile:
  template: live_tile_card
  styles:
    grid:
      - grid-template-areas: '". i s ." "n n l l"'
      - grid-template-columns: auto min-content min-content auto
      - grid-template-rows: auto 16px 0
    card:
      - background: var(--ha-card-background)
    icon:
      - color: var(--primary-text-color)
      - width: 40px
      - height: 40px
      - margin: 0
    img_cell:
      - height: 40px
      - align-self: center
      - justify-self: end
      - padding: 8px 0 0 0
    state:
      - color: var(--primary-text-color)
      - font-size: var(--h2-font-size)
      - font-weight: var(--h2-font-weight)
      - align-self: center
      - justify-self: start
      - padding: 4px 0px 2px 8px
    name:
      - color: var(--primary-text-color)
      - text-transform: capitalize
      - position: absolute
    label:
      - position: absolute
      - right: 12px
      - bottom: 10px
      - height: auto
      - text-align: right
      - color: var(--primary-text-color)
      - opacity: 0.5
      - padding: 0
      - justify-self: end
      - align-self: end

# Light Group Button Card

light_button_card_group:
  template: live_tile_card
  group_expand: true
  state:
    - value: 'on'
      label: |
        [[[
          var lightsOn = entity.attributes.entity_id.filter(e => states[e].state == "on").length
          if (lightsOn > 1) { return lightsOn + " lights are on" } else { return "1 light is on" }
        ]]]
  styles:
    card:
      - background: |
          [[[
            if (entity.state == "on") {
              var lights = entity.attributes.entity_id.filter(e => states[e].state != "off")
              if (lights.length > 0) {
                var totalColor = [0,0,0]
                var totalLights = 0
                lights.forEach(light => {
                  var colors = states[light].attributes.rgb_color
                  if (Array.isArray(colors)) {
                    colors.forEach((col, index) => totalColor[index] += col)
                    totalLights += 1
                  }
                })
                totalColor.forEach((col, index) => totalColor[index] = Math.round( totalColor[index] / totalLights ))
                if (isNaN(totalColor[0])) { var finalColor = 'var(--rgb-primary-color)' } else { var finalColor = totalColor.toString() }
                return 'linear-gradient( 0deg, rgb(' + finalColor + ') 4px, rgba(' + finalColor + ', .1) 4px )'
              }
            } else {
              return 'var(--slider-thumb-color)'
            }
          ]]]
      - color: var(--primary-text-color)

# Live Tile with Unit

live_tile_with_unit:
  template:
    - live_tile
  custom_fields:
    unit: '[[[ return entity.attributes.unit_of_measurement ]]]'
  styles:
    grid:
      - grid-template-areas: '". i s ." ". i unit ." "n n l l"'
      - grid-template-rows: auto auto 16px 0
    state:
      - align-self: end
      - padding: 4px 0 0 8px
    custom_fields:
      unit:
        - font-size: var(--h6-font-size)
        - font-weight: var(--h6-font-weight)
        - text-transform: uppercase
        - place-self: start start
        - padding: 0 0 0 8px
        - margin-top: -4px
        - color: var(--primary-text-color)
        - opacity: .6